package com.glavesoft.util;import android.app.Activity;import android.app.AlertDialog;import android.app.DownloadManager;import android.app.ProgressDialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.database.Cursor;import android.net.Uri;import android.os.Build;import android.os.Environment;import android.os.StrictMode;import android.provider.Settings;import android.util.Log;import android.widget.Toast;import androidx.core.content.FileProvider;import com.glavesoft.pawnuser.R;import com.mdx.framework.F;import com.mdx.framework.Frame;import com.mdx.framework.utility.AbAppUtil;import com.mdx.framework.utility.Helper;import com.mdx.framework.utility.permissions.BasePermRequest;import com.mdx.framework.utility.permissions.PermissionRequest;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.ProtocolException;import java.net.URL;import java.net.URLConnection;public class HttpUtil {    private static final String TAG = "HttpUtils";    private static boolean DEBUG = false;    //超时设置    public static final int TimeoutConnection = 60 * 1000;    //连接超时时间    public static final int TimeoutSocket = 60 * 1000;    //Socket超时时间    public static final String msg_nonetwork = "网络异常，请查看网络配置！";    public static int HTTP_RESULT_CACHE = -1; //网络不同，缓存    public static int HTTP_RESULT_FAIL = 0; //不成功    public static int HTTP_RESULT_OK = 1; //成功    public static final int StatusCode_Success = 200;    private static void setHttpCommonParams(HttpURLConnection conn) {        conn.setReadTimeout(15000);        conn.setConnectTimeout(30000);        conn.setDoInput(true);        conn.setDoOutput(true);        conn.setUseCaches(false);        conn.setRequestProperty("Connection", "Keep-Alive");        conn.setRequestProperty("Accept-Charset", "UTF-8");        conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");    }    /*     * 从网络上获取XML数据     */    public static InputStream readXMLDataFromInternet(String url) {        URL infoUrl = null;        InputStream inStream = null;        if (NetworkUtils.isNetworkAvailable()) {            try {                if (DEBUG)                    System.out.println(TAG + "URL-->" + url);                infoUrl = new URL(url);                URLConnection connection;                connection = infoUrl.openConnection();                connection.setConnectTimeout(TimeoutConnection);                connection.setReadTimeout(TimeoutSocket);                HttpURLConnection httpConnection = (HttpURLConnection) connection;                int responseCode = httpConnection.getResponseCode();                if (responseCode == HttpURLConnection.HTTP_OK) {                    inStream = httpConnection.getInputStream();                }            } catch (IOException e) {                e.printStackTrace();            }        }        return inStream;    }    /**     * HTTP POST通信     *     * @param server_url 服务器URL     * @param message    报文     * @return     */    public static String post(String server_url, String message) {        BufferedWriter bw = null;        BufferedReader br = null;        HttpURLConnection conn = null;        String temp = null;        StringBuffer resp = new StringBuffer();        try {            URL url = new URL(server_url);            conn = (HttpURLConnection) url.openConnection();            setHttpCommonParams(conn);            conn.setRequestMethod("POST");            conn.connect();            bw = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream(), "UTF-8"));            bw.write(message);            bw.flush();            if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {                br = new BufferedReader(new InputStreamReader(conn.getInputStream()));                while ((temp = br.readLine()) != null) {                    resp.append(temp);                }            } else {                Log.i("网络异常", "响应码:" + conn.getResponseCode());                conn.disconnect();                return null;            }        } catch (MalformedURLException e) {            Log.e("net error", "网络地址解析错误");            return null;        } catch (ProtocolException e) {            Log.e("net error", "HTTP方法名设置错误");            return null;        } catch (IOException e) {            Log.e("net error", "网络输出流打开失败");            return null;        } finally {            bw = null;            br = null;            conn.disconnect();        }        return resp.toString();    }    //    public static void downLoadFile(Context context,//                                    String url,//                                    AbFileHttpResponseListener responseListener) {//        if (context == null) {//            return;//        }//        if (null == client) {//            client = AbHttpUtil.getInstance(context);//        }//        if (!AbAppUtil.isNetworkAvailable(context)) {//            Toast.makeText(context, "无可用网络，请检查网络连接", Toast.LENGTH_SHORT).show();//            return;//        }//        client.setTimeout(TIMEOUT);//        client.get(url, new AbRequestParams(), responseListener, false);//    }//////    public static void updateApk(final Activity context, final String url) {//        F.yShoure(context, "版本更新", "检查到新版本，是否更新", new DialogInterface.OnClickListener() {//            @Override//            public void onClick(DialogInterface dialogInterface, int i) {//                final ProgressDialog mProgressDialog = new ProgressDialog(context);//                mProgressDialog.setMessage(Frame.CONTEXT.getResources().getString(R.string.app_name) + "更新下载中...");//                mProgressDialog.setMax(100);//                mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);//                HttpUtil.downLoadFile(context, url, new AbFileHttpResponseListener() {//                    @Override//                    public void onStart() {//                        mProgressDialog.show();//                    }////                    @Override//                    public void onFinish() {//                        mProgressDialog.dismiss();//                        installApk(getFile(), context);//                    }////                    @Override//                    public void onFailure(int statusCode, String content, Throwable error) {//                        mProgressDialog.dismiss();//                        Helper.toast("下载失败" + content, context);//                    }////                    @Override//                    public void onProgress(final long bytesWritten, final long totalSize) {//                        super.onProgress(bytesWritten, totalSize);//                        mProgressDialog.setProgress((int) (bytesWritten * 100 / totalSize));//                        Log.i("jindu", (int) (bytesWritten * 100 / totalSize) + "");//                    }//                });//            }//        });////    }    public static void updateApk(final Activity act, final String url, int isFlag) {        new AlertDialog.Builder(act).setTitle("版本更新").setMessage("检查到新版本，是否更新")                .setPositiveButton("是", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialogInterface, int i) {                        act.registerReceiver(new DownloadCompleteReceiver(), new IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE));                        StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()                                .detectDiskReads().detectDiskWrites().detectNetwork() // 这里可以替换为detectAll()                                .penaltyLog() // 打印logcat，当然也可以定位到dropbox，通过文件保存相应的log                                .build());                        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()                                .detectLeakedSqlLiteObjects() // 探测SQLite数据库操作                                .penaltyLog() // 打印logcat                                .penaltyDeath().build());                        DownloadManager.Request request = new DownloadManager.Request(Uri.parse(url));//http://www.2cto.com/kf/201503/386509.html                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {                            request.allowScanningByMediaScanner();                            request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);                        }                        request.setVisibleInDownloadsUi(true);                        request.setTitle(Frame.CONTEXT.getResources().getString(R.string.app_name));                        request.setDescription(Frame.CONTEXT.getResources().getString(R.string.app_name) + "正在下载");                        request.setAllowedOverRoaming(false);                        //设置下载的路径                        File file = new File(act.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS), "蚌蚌拍档.apk");                        if (file.exists()) {                            file.delete();                        }                        request.setDestinationInExternalFilesDir(act, Environment.DIRECTORY_DOWNLOADS, "蚌蚌拍档.apk");                        DownloadManager downManager = (DownloadManager) act.                                getSystemService(Context.DOWNLOAD_SERVICE);                        downManager.enqueue(request);                    }                }).setCancelable(isFlag == 1 ? false : true)                .show();    }    public static class DownloadCompleteReceiver extends BroadcastReceiver {        private DownloadManager manager;        @Override        public void onReceive(Context context, Intent intent) {            manager = (DownloadManager) context.getSystemService(Context.DOWNLOAD_SERVICE);            if (intent.getAction().equals(DownloadManager.ACTION_DOWNLOAD_COMPLETE)) {                //通过downloadId去查询下载的文件名                long downloadId = intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, -1);                DownloadManager.Query query = new DownloadManager.Query();                query.setFilterById(downloadId);                Cursor myDownload = manager.query(query);                if (myDownload.moveToFirst()) {                    int type = myDownload.getInt(myDownload.getColumnIndex(DownloadManager.COLUMN_STATUS));                    if (type == DownloadManager.STATUS_SUCCESSFUL) {                        installAPK(context);                        myDownload.close();                    }                }            }        }        //安装APK        private void installAPK(Context context) {            if( new File(context.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS), "蚌蚌拍档.apk").exists()){                Intent intent = new Intent(Intent.ACTION_VIEW);                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) { // 7.0+以上版本                    Uri apkUri = FileProvider.getUriForFile(context, context.getApplicationContext().getPackageName() + ".provider", new File(context.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS), "蚌蚌拍档.apk")); //与manifest中定义的provider中的authorities="com.shawpoo.app.fileprovider"保持一致                    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);                    intent.setDataAndType(apkUri, "application/vnd.android.package-archive");                } else {                    intent.setDataAndType(Uri.fromFile(new File(context.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS), "蚌蚌拍档.apk")), "application/vnd.android.package-archive");                }                context.startActivity(intent);            }else{                Helper.toast("文件不存咋");            }        }    }    /**     * 安装APK文件     */    public static void installApk(Context context) {        if( new File(context.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS), "蚌蚌拍档.apk").exists()){            Intent intent = new Intent(Intent.ACTION_VIEW);            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) { // 7.0+以上版本                Uri apkUri = FileProvider.getUriForFile(context, context.getApplicationContext().getPackageName() + ".provider", new File(context.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS), "蚌蚌拍档.apk")); //与manifest中定义的provider中的authorities="com.shawpoo.app.fileprovider"保持一致                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);                intent.setDataAndType(apkUri, "application/vnd.android.package-archive");            } else {                intent.setDataAndType(Uri.fromFile(new File(context.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS), "蚌蚌拍档.apk")), "application/vnd.android.package-archive");            }            context.startActivity(intent);        }else{            Helper.toast("文件不存咋");        }    }}