package com.glavesoft.util;import android.util.Log;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.ProtocolException;import java.net.URL;import java.net.URLConnection;public class HttpUtil {	private static final String TAG = "HttpUtils";	private static boolean DEBUG = false;  		//超时设置	public static final int TimeoutConnection = 60*1000;    //连接超时时间	public static final int TimeoutSocket = 60*1000;    //Socket超时时间		public static final String msg_nonetwork = "网络异常，请查看网络配置！";	public static int HTTP_RESULT_CACHE = -1; //网络不同，缓存	public static int HTTP_RESULT_FAIL = 0; //不成功	public static int HTTP_RESULT_OK = 1; //成功		public static final int StatusCode_Success = 200;    private static void setHttpCommonParams(HttpURLConnection conn){    conn.setReadTimeout(15000);    conn.setConnectTimeout(30000);    conn.setDoInput(true);    conn.setDoOutput(true);    conn.setUseCaches(false);    conn.setRequestProperty("Connection", "Keep-Alive");    conn.setRequestProperty("Accept-Charset", "UTF-8");    conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");  }    /*	 * 从网络上获取XML数据	 */	public static InputStream readXMLDataFromInternet(String url) {		URL infoUrl = null;		InputStream inStream = null;		if (NetworkUtils.isNetworkAvailable()) {			try {				if (DEBUG)					System.out.println(TAG + "URL-->" + url);				infoUrl = new URL(url);				URLConnection connection;				connection = infoUrl.openConnection();				connection.setConnectTimeout(TimeoutConnection);				connection.setReadTimeout(TimeoutSocket);				HttpURLConnection httpConnection = (HttpURLConnection) connection;				int responseCode = httpConnection.getResponseCode();				if (responseCode == HttpURLConnection.HTTP_OK) {					inStream = httpConnection.getInputStream();				}			} catch (IOException e) {				e.printStackTrace();			}		}		return inStream;	}    /**   * HTTP POST通信   *    * @param server_url 服务器URL   * @param message 报文   * @return   */  public static String post(String server_url, String message){    BufferedWriter bw=null;    BufferedReader br=null;    HttpURLConnection conn=null;        String temp=null;    StringBuffer resp=new StringBuffer();    try {      URL url=new URL(server_url);      conn=(HttpURLConnection)url.openConnection();      setHttpCommonParams(conn);      conn.setRequestMethod("POST");      conn.connect();      bw=new BufferedWriter(new OutputStreamWriter(conn.getOutputStream(),"UTF-8"));      bw.write(message);      bw.flush();      if (conn.getResponseCode()== HttpURLConnection.HTTP_OK) {        br=new BufferedReader(new InputStreamReader(conn.getInputStream()));        while ((temp=br.readLine())!=null) {          resp.append(temp);        }      }else{        Log.i("网络异常", "响应码:"+conn.getResponseCode());        conn.disconnect();        return null;      }    } catch (MalformedURLException e) {      Log.e("net error", "网络地址解析错误");      return null;    } catch (ProtocolException e) {      Log.e("net error", "HTTP方法名设置错误");      return null;    } catch (IOException e) {      Log.e("net error", "网络输出流打开失败");      return null;    }finally{      bw=null;      br=null;      conn.disconnect();    }        return resp.toString();  }    }